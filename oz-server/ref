module_url = "./USELarge3"

# Create graph and finalize (finalizing optional but recommended).
g = tf.Graph()
with g.as_default():
    # We will be feeding 1D tensors of text into the graph.
    text_input = tf.placeholder(dtype=tf.string, shape=[None])
    embed = hub.Module(module_url)
    embedded_text = embed(text_input)
    init_op = tf.group([tf.global_variables_initializer(), tf.tables_initializer()])
g.finalize()

# Create session and initialize.
session = tf.Session(graph=g)
session.run(init_op)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/test', methods=['GET', 'POST'])
def test():
    return jsonify(
        status = "active"
    )

@app.route('/embed', methods=['POST'])
def phrase_embed():
    phrase = request.form['phrase']
    embedding = session.run(embedded_text, feed_dict={text_input: [phrase]}).tolist()
    return jsonify(
        phrase=phrase,
        embedding=embedding
    )

@app.route('/embed_intents', methods=['POST'])
def intent_embed():
    triggers = request.get_json()['triggers']
    embeddings = session.run(embedded_text, feed_dict={text_input: triggers}).tolist()
    intent_embeddings = dict(zip(triggers, embeddings))
    return jsonify(
        intent_embeddings=intent_embeddings
    )

@app.route('/similarity', methods=['POST'])
def similarity():
    data = request.get_json()
    phrase = data['phrase']
    corpus = data['corpus']
    embeddings = list(corpus.values())
    return np.inner(embeddings, embeddings)[0]